package acmtree;

public class ACMTreeDataInstance {

	/*
	 * This class is used as training / testing data instance.
	 * This instance corresponds to a (parent, target) pair,
	 * and should be generated by ACMTreeNode. 
	 * The order of the features can't be changed arbitrary. 
	 */
	
	double score = 0;									// 0.0 ~ 1.0
	
	double parentLevel = 0;								// Feature 1
	double parentWebPageNumber = 0;						// Feature 2
	double siblingCount = 0;							// Feature 3
	double childrenCount = 0;							// Feature 4
	double grandparentWebPageNumber = 0;				// Feature 5
	double siblingWebPageNumberAverage = 0;				// Feature 6
	double siblingWebPageNumberMaximum = 0;				// Feature 7
	double siblingWebPageNumberMinimum = 0;				// Feature 8
	double childrenWebPageNumberAverage = 0;			// Feature 9
	double childrenWebPageNumberMaximum = 0;			// Feature 10
	double childrenWebPageNumberMinimum = 0;			// Feature 11
	double targetWebPageNumber = 0;						// Feature 12
	double parentAndTargetSimilarity = 0;				// Feature 13
	double grandparentAndTargetSimilarity = 0;			// Feature 14
	double siblingAndTargetSimilarityAverage = 0;		// Feature 15
	double siblingAndTargetSimilarityMaximum = 0;		// Feature 16
	double siblingAndTargetSimilarityMinimum = 0;		// Feature 17
	double childrenAndTargetSimilarityAverage = 0;		// Feature 18
	double childrenAndTargetSimilarityMaximum = 0;		// Feature 19
	double childrenAndTargetSimilarityMinimum = 0;		// Feature 20
	double parentAndTargetAuthorLevel1 = 0;				// Feature 21
	double grandparentAndTargetAuthorLevel1 = 0;		// Feature 22
	double siblingAndTargetAuthorLevel1Average = 0;		// Feature 23
	double siblingAndTargetAuthorLevel1Maximum = 0;		// Feature 24
	double siblingAndTargetAuthorLevel1Minimum = 0;		// Feature 25
	double childrenAndTargetAuthorLevel1Average = 0;	// Feature 26
	double childrenAndTargetAuthorLevel1Maximum = 0;	// Feature 27
	double childrenAndTargetAuthorLevel1Minimum = 0;	// Feature 28
	double parentAndTargetJaccard = 0;					// Feature 29
	double grandparentAndTargetJaccard = 0;				// Feature 30
	double siblingAndTargetJaccardAverage = 0;			// Feature 31
	double siblingAndTargetJaccardMaximum = 0;			// Feature 32
	double siblingAndTargetJaccardMinimum = 0;			// Feature 33
	double childrenAndTargetJaccardAverage = 0;			// Feature 34
	double childrenAndTargetJaccardMaximum = 0;			// Feature 35
	double childrenAndTargetJaccardMinimum = 0;			// Feature 36
	double parentAndTargetIntersection = 0;				// Feature 37
	double grandparentAndTargetIntersection = 0;		// Feature 38
	double siblingAndTargetIntersectionAverage = 0;		// Feature 39
	double siblingAndTargetIntersectionMaximum = 0;		// Feature 40
	double siblingAndTargetIntersectionMinimum = 0;		// Feature 41
	double childrenAndTargetIntersectionAverage = 0;	// Feature 42
	double childrenAndTargetIntersectionMaximum = 0;	// Feature 43
	double childrenAndTargetIntersectionMinimum = 0;	// Feature 44
	double parentAndTargetAuthorLevel12 = 0;			// Feature 45
	double grandparentAndTargetAuthorLevel12 = 0;		// Feature 46
	double siblingAndTargetAuthorLevel12Average = 0;	// Feature 47
	double siblingAndTargetAuthorLevel12Maximum = 0;	// Feature 48
	double siblingAndTargetAuthorLevel12Minimum = 0;	// Feature 49
	double childrenAndTargetAuthorLevel12Average = 0;	// Feature 50
	double childrenAndTargetAuthorLevel12Maximum = 0;	// Feature 51
	double childrenAndTargetAuthorLevel12Minimum = 0;	// Feature 52
	double parentAndTargetWord = 0;						// Feature 53
	double grandparentAndTargetWord = 0;				// Feature 54
	double siblingAndTargetWordAverage = 0;				// Feature 55
	double siblingAndTargetWordMaximum = 0;				// Feature 56
	double siblingAndTargetWordMinimum = 0;				// Feature 57
	double childrenAndTargetWordAverage = 0;			// Feature 58
	double childrenAndTargetWordMaximum = 0;			// Feature 59
	double childrenAndTargetWordMinimum = 0;			// Feature 60
	
	
	int commonLevel = 0;
	
	public static void main(String[] args) throws Exception{
		ACMTreeDataInstance di = new ACMTreeDataInstance();
		di.score = 1;
		System.out.println(di.toStringForLibSVC(false, 1, 5, 22));
	}

	public String toStringForLibSVMFeature(String result, boolean singleFeature, int method) {

		if(singleFeature) {
			result += String.format(" 13:%.4f", parentAndTargetSimilarity);
		}
		else {	
			result += String.format(" 1:%.4f", parentLevel);							// Feature 1
			result += String.format(" 2:%.4f", parentWebPageNumber);					// Feature 2
			result += String.format(" 3:%.4f", siblingCount);							// Feature 3
			result += String.format(" 4:%.4f", childrenCount);							// Feature 4
			result += String.format(" 5:%.4f", grandparentWebPageNumber);				// Feature 5
			result += String.format(" 6:%.4f", siblingWebPageNumberAverage);			// Feature 6
			result += String.format(" 7:%.4f", siblingWebPageNumberMaximum);			// Feature 7
			result += String.format(" 8:%.4f", siblingWebPageNumberMinimum);			// Feature 8
			result += String.format(" 9:%.4f", childrenWebPageNumberAverage);			// Feature 9
			result += String.format(" 10:%.4f", childrenWebPageNumberMaximum);			// Feature 10
			result += String.format(" 11:%.4f", childrenWebPageNumberMinimum);			// Feature 11
			result += String.format(" 12:%.4f", targetWebPageNumber);					// Feature 12
			result += String.format(" 13:%.4f", parentAndTargetSimilarity);				// Feature 13
			result += String.format(" 14:%.4f", grandparentAndTargetSimilarity);		// Feature 14
			result += String.format(" 15:%.4f", siblingAndTargetSimilarityAverage);		// Feature 15
			result += String.format(" 16:%.4f", siblingAndTargetSimilarityMaximum);		// Feature 16
			result += String.format(" 17:%.4f", siblingAndTargetSimilarityMinimum);		// Feature 17
			result += String.format(" 18:%.4f", childrenAndTargetSimilarityAverage);	// Feature 18
			result += String.format(" 19:%.4f", childrenAndTargetSimilarityMaximum);	// Feature 19
			result += String.format(" 20:%.4f", childrenAndTargetSimilarityMinimum);	// Feature 20

			// Note: this might be level1 or level12
			if(method == 20) {
				result += String.format(" 21:%.4f", parentAndTargetAuthorLevel1);			// Feature 21
			}
			else if (method == 22) {
				result += String.format(" 21:%.4f", parentAndTargetAuthorLevel12);			// Feature 21
			}
			
			/*
			result += String.format(" 22:%.4f", grandparentAndTargetAuthorLevel1);		// Feature 22
			result += String.format(" 23:%.4f", siblingAndTargetAuthorLevel1Average);	// Feature 23
			result += String.format(" 24:%.4f", siblingAndTargetAuthorLevel1Maximum);	// Feature 24
			result += String.format(" 25:%.4f", siblingAndTargetAuthorLevel1Minimum);	// Feature 25
			result += String.format(" 26:%.4f", childrenAndTargetAuthorLevel1Average);	// Feature 26
			result += String.format(" 27:%.4f", childrenAndTargetAuthorLevel1Maximum);	// Feature 27
			result += String.format(" 28:%.4f", childrenAndTargetAuthorLevel1Minimum);	// Feature 28
			*/
			
			//result += String.format(" 29:%.4f", parentAndTargetJaccard);				// Feature 29
			/*
			result += String.format(" 30:%.4f", grandparentAndTargetJaccard);			// Feature 30
			result += String.format(" 31:%.4f", siblingAndTargetJaccardAverage);		// Feature 31
			result += String.format(" 32:%.4f", siblingAndTargetJaccardMaximum);		// Feature 32
			result += String.format(" 33:%.4f", siblingAndTargetJaccardMinimum);		// Feature 33
			result += String.format(" 34:%.4f", childrenAndTargetJaccardAverage);		// Feature 34
			result += String.format(" 35:%.4f", childrenAndTargetJaccardMaximum);		// Feature 35
			result += String.format(" 36:%.4f", childrenAndTargetJaccardMinimum);		// Feature 36
			*/

			//result += String.format(" 37:%.4f", parentAndTargetIntersection);				// Feature 37
			/*
			result += String.format(" 38:%.4f", grandparentAndTargetIntersection);			// Feature 38
			result += String.format(" 39:%.4f", siblingAndTargetIntersectionAverage);		// Feature 39
			result += String.format(" 40:%.4f", siblingAndTargetIntersectionMaximum);		// Feature 40
			result += String.format(" 41:%.4f", siblingAndTargetIntersectionMinimum);		// Feature 41
			result += String.format(" 42:%.4f", childrenAndTargetIntersectionAverage);		// Feature 42
			result += String.format(" 43:%.4f", childrenAndTargetIntersectionMaximum);		// Feature 43
			result += String.format(" 44:%.4f", childrenAndTargetIntersectionMinimum);		// Feature 44
			*/

			//result += String.format(" 45:%.4f", parentAndTargetAuthorLevel12);			// Feature 45 
			/*
			result += String.format(" 46:%.4f", grandparentAndTargetAuthorLevel12);			// Feature 46
			result += String.format(" 47:%.4f", siblingAndTargetAuthorLevel12Average);		// Feature 47
			result += String.format(" 48:%.4f", siblingAndTargetAuthorLevel12Maximum);		// Feature 48
			result += String.format(" 49:%.4f", siblingAndTargetAuthorLevel12Minimum);		// Feature 49
			result += String.format(" 50:%.4f", childrenAndTargetAuthorLevel12Average);		// Feature 50
			result += String.format(" 51:%.4f", childrenAndTargetAuthorLevel12Maximum);		// Feature 51
			result += String.format(" 52:%.4f", childrenAndTargetAuthorLevel12Minimum);		// Feature 52
			*/			

			result += String.format(" 53:%.4f", parentAndTargetWord);						// Feature 53
			/*
			result += String.format(" 54:%.4f", grandparentAndTargetWord);					// Feature 54
			result += String.format(" 55:%.4f", siblingAndTargetWordAverage);				// Feature 55
			result += String.format(" 56:%.4f", siblingAndTargetWordMaximum);				// Feature 56
			result += String.format(" 57:%.4f", siblingAndTargetWordMinimum);				// Feature 57
			result += String.format(" 58:%.4f", childrenAndTargetWordAverage);				// Feature 58
			result += String.format(" 59:%.4f", childrenAndTargetWordMaximum);				// Feature 59
			result += String.format(" 60:%.4f", childrenAndTargetWordMinimum);				// Feature 60
			*/
			
		}
				
		return result;
	}
	
	public String toStringForLibSVR(boolean singleFeature, int method) {
		String result = new String();
		result += String.format("%.4f", score);										// 0.0 ~ 1.0
		result = this.toStringForLibSVMFeature(result, singleFeature, method);
		return result;
	}

	public String toStringForLibSVC(boolean singleFeature, double possitiveThreshold, int possitiveLevel, int method) {
		String result = new String();
		if(this.getScore()>=possitiveThreshold || this.commonLevel>=possitiveLevel) {
			result += "+1";			
		}
		else {
			result += "-1";
		}
		result = this.toStringForLibSVMFeature(result, singleFeature, method);
		return result;
	}

	public String toStringForWekaClassification(boolean singleFeature, double possitiveThreshold, int possitiveLevel, int method, boolean enrichment, int features) {
		String result = new String();
		if(this.getScore()>=possitiveThreshold || this.commonLevel>=possitiveLevel) {
			result += "+1";			
		}
		else {
			result += "-1";
		}
		result = this.toStringForWekaFeature(result, singleFeature, method, enrichment, features);
		return result;
	}

	public String toStringForWekaHeader(boolean singleFeature, int method, boolean enrichment, int features) {

		String result = "";
		result += "@relation ACMTree\n";
		result += "@attribute class {+1,-1}\n";
		
		if(singleFeature) {
			result += "@attribute parentAndTargetSimilarity numeric\n";
		}
		else {
			if(features==0 || features==1) {
				result += "@attribute parentLevel numeric\n";
			}
			if(features==0 || features==2) {
				result += "@attribute parentWebPageNumber numeric\n";
			}
			if(features==0 || features==1) {
				result += "@attribute siblingCount numeric\n";
				result += "@attribute childrenCount numeric\n";
			}
			
			if(features==0 || features==2) {
				result += "@attribute targetWebPageNumber numeric\n";
				if(enrichment) {
					result += "@attribute grandparentWebPageNumber numeric\n";
					result += "@attribute siblingWebPageNumberAverage numeric\n";
					result += "@attribute siblingWebPageNumberMaximum numeric\n";
					result += "@attribute siblingWebPageNumberMinimum numeric\n";
					result += "@attribute childrenWebPageNumberAverage numeric\n";
					result += "@attribute childrenWebPageNumberMaximum numeric\n";
					result += "@attribute childrenWebPageNumberMinimum numeric\n";
				}
				
				result += "@attribute parentAndTargetSimilarity numeric\n";
				if(enrichment) {
					result += "@attribute grandparentAndTargetSimilarity numeric\n";
					result += "@attribute siblingAndTargetSimilarityAverage numeric\n";
					result += "@attribute siblingAndTargetSimilarityMaximum numeric\n";
					result += "@attribute siblingAndTargetSimilarityMinimum numeric\n";
					result += "@attribute childrenAndTargetSimilarityAverage numeric\n";
					result += "@attribute childrenAndTargetSimilarityMaximum numeric\n";
					result += "@attribute childrenAndTargetSimilarityMinimum numeric\n";
				}
				
				result += "@attribute parentAndTargetAuthorLevel1 numeric\n";
				if(enrichment) {
					result += "@attribute grandparentAndTargetAuthorLevel1 numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel1Average numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel1Maximum numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel1Minimum numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel1Average numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel1Maximum numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel1Minimum numeric\n";
				}
				
				result += "@attribute parentAndTargetJaccard numeric\n";
				if(enrichment) {
					result += "@attribute grandparentAndTargetJaccard numeric\n";
					result += "@attribute siblingAndTargetJaccardAverage numeric\n";
					result += "@attribute siblingAndTargetJaccardMaximum numeric\n";
					result += "@attribute siblingAndTargetJaccardMinimum numeric\n";
					result += "@attribute childrenAndTargetJaccardAverage numeric\n";
					result += "@attribute childrenAndTargetJaccardMaximum numeric\n";
					result += "@attribute childrenAndTargetJaccardMinimum numeric\n";
				}
				
				result += "@attribute parentAndTargetIntersection numeric\n";
					if(enrichment) {
					result += "@attribute grandparentAndTargetIntersection numeric\n";
					result += "@attribute siblingAndTargetIntersectionAverage numeric\n";
					result += "@attribute siblingAndTargetIntersectionMaximum numeric\n";
					result += "@attribute siblingAndTargetIntersectionMinimum numeric\n";
					result += "@attribute childrenAndTargetIntersectionAverage numeric\n";
					result += "@attribute childrenAndTargetIntersectionMaximum numeric\n";
					result += "@attribute childrenAndTargetIntersectionMinimum numeric\n";
				}
			}
				
			if(features==0 || features==3) {
				result += "@attribute parentAndTargetAuthorLevel12 numeric\n";
				if(enrichment) {
					result += "@attribute grandparentAndTargetAuthorLevel12 numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel12Average numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel12Maximum numeric\n";
					result += "@attribute siblingAndTargetAuthorLevel12Minimum numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel12Average numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel12Maximum numeric\n";
					result += "@attribute childrenAndTargetAuthorLevel12Minimum numeric\n";
				}
				
				result += "@attribute parentAndTargetWord numeric\n";
				if(enrichment) {
					result += "@attribute grandparentAndTargetWord numeric\n";
					result += "@attribute siblingAndTargetWordAverage numeric\n";
					result += "@attribute siblingAndTargetWordMaximum numeric\n";
					result += "@attribute siblingAndTargetWordMinimum numeric\n";
					result += "@attribute childrenAndTargetWordAverage numeric\n";
					result += "@attribute childrenAndTargetWordMaximum numeric\n";
					result += "@attribute childrenAndTargetWordMinimum numeric\n";
				}
			}
		}
		result += "@data\n";	
				
		return result;
	}
	
	public String toStringForWekaFeature(String result, boolean singleFeature, int method, boolean enrichment, int features) {

		if(singleFeature) {
			result += String.format(",%.4f", parentAndTargetSimilarity);
		}
		else {
			
			if(features==0 || features==1) {
				result += String.format(",%.4f", parentLevel);								// Feature 1
			}
			if(features==0 || features==2) {
				result += String.format(",%.4f", parentWebPageNumber);						// Feature 2
			}
			if(features==0 || features==1) {
				result += String.format(",%.4f", siblingCount);								// Feature 3
				result += String.format(",%.4f", childrenCount);							// Feature 4
			}

			if(features==0 || features==2) {
				result += String.format(",%.4f", targetWebPageNumber);						// Feature 12
				if(enrichment) {
					result += String.format(",%.4f", grandparentWebPageNumber);					// Feature 5
					result += String.format(",%.4f", siblingWebPageNumberAverage);				// Feature 6
					result += String.format(",%.4f", siblingWebPageNumberMaximum);				// Feature 7
					result += String.format(",%.4f", siblingWebPageNumberMinimum);				// Feature 8
					result += String.format(",%.4f", childrenWebPageNumberAverage);				// Feature 9
					result += String.format(",%.4f", childrenWebPageNumberMaximum);				// Feature 10
					result += String.format(",%.4f", childrenWebPageNumberMinimum);				// Feature 11
				}
				
				result += String.format(",%.4f", parentAndTargetSimilarity);				// Feature 13
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetSimilarity);			// Feature 14
					result += String.format(",%.4f", siblingAndTargetSimilarityAverage);		// Feature 15
					result += String.format(",%.4f", siblingAndTargetSimilarityMaximum);		// Feature 16
					result += String.format(",%.4f", siblingAndTargetSimilarityMinimum);		// Feature 17
					result += String.format(",%.4f", childrenAndTargetSimilarityAverage);		// Feature 18
					result += String.format(",%.4f", childrenAndTargetSimilarityMaximum);		// Feature 19
					result += String.format(",%.4f", childrenAndTargetSimilarityMinimum);		// Feature 20
				}
				
				result += String.format(",%.4f", parentAndTargetAuthorLevel1);				// Feature 21
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetAuthorLevel1);			// Feature 22
					result += String.format(",%.4f", siblingAndTargetAuthorLevel1Average);		// Feature 23
					result += String.format(",%.4f", siblingAndTargetAuthorLevel1Maximum);		// Feature 24
					result += String.format(",%.4f", siblingAndTargetAuthorLevel1Minimum);		// Feature 25
					result += String.format(",%.4f", childrenAndTargetAuthorLevel1Average);		// Feature 26
					result += String.format(",%.4f", childrenAndTargetAuthorLevel1Maximum);		// Feature 27
					result += String.format(",%.4f", childrenAndTargetAuthorLevel1Minimum);		// Feature 28
				}
				
				result += String.format(",%.4f", parentAndTargetJaccard);					// Feature 29
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetJaccard);				// Feature 30
					result += String.format(",%.4f", siblingAndTargetJaccardAverage);			// Feature 31
					result += String.format(",%.4f", siblingAndTargetJaccardMaximum);			// Feature 32
					result += String.format(",%.4f", siblingAndTargetJaccardMinimum);			// Feature 33
					result += String.format(",%.4f", childrenAndTargetJaccardAverage);			// Feature 34
					result += String.format(",%.4f", childrenAndTargetJaccardMaximum);			// Feature 35
					result += String.format(",%.4f", childrenAndTargetJaccardMinimum);			// Feature 36
				}
				
				result += String.format(",%.4f", parentAndTargetIntersection);				// Feature 37
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetIntersection);			// Feature 38
					result += String.format(",%.4f", siblingAndTargetIntersectionAverage);		// Feature 39
					result += String.format(",%.4f", siblingAndTargetIntersectionMaximum);		// Feature 40
					result += String.format(",%.4f", siblingAndTargetIntersectionMinimum);		// Feature 41
					result += String.format(",%.4f", childrenAndTargetIntersectionAverage);		// Feature 42
					result += String.format(",%.4f", childrenAndTargetIntersectionMaximum);		// Feature 43
					result += String.format(",%.4f", childrenAndTargetIntersectionMinimum);		// Feature 44
				}	
			}
			
			if(features==0 || features==3) {
				result += String.format(",%.4f", parentAndTargetAuthorLevel12);				// Feature 45
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetAuthorLevel12);		// Feature 46
					result += String.format(",%.4f", siblingAndTargetAuthorLevel12Average);		// Feature 47
					result += String.format(",%.4f", siblingAndTargetAuthorLevel12Maximum);		// Feature 48
					result += String.format(",%.4f", siblingAndTargetAuthorLevel12Minimum);		// Feature 49
					result += String.format(",%.4f", childrenAndTargetAuthorLevel12Average);	// Feature 50
					result += String.format(",%.4f", childrenAndTargetAuthorLevel12Maximum);	// Feature 51
					result += String.format(",%.4f", childrenAndTargetAuthorLevel12Minimum);	// Feature 52
				}
				
				result += String.format(",%.4f", parentAndTargetWord);						// Feature 53
				if(enrichment) {
					result += String.format(",%.4f", grandparentAndTargetWord);					// Feature 54
					result += String.format(",%.4f", siblingAndTargetWordAverage);				// Feature 55
					result += String.format(",%.4f", siblingAndTargetWordMaximum);				// Feature 56
					result += String.format(",%.4f", siblingAndTargetWordMinimum);				// Feature 57
					result += String.format(",%.4f", childrenAndTargetWordAverage);				// Feature 58
					result += String.format(",%.4f", childrenAndTargetWordMaximum);				// Feature 59
					result += String.format(",%.4f", childrenAndTargetWordMinimum);				// Feature 60
				}
			}
		}
				
		return result;
	}
	
	/**
	 * @return the score (for regression)
	 */
	public double getScore() {
		return score;
	}
}
